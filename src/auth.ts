import {
  cryptoWaitReady,
  signatureVerify,
} from '@polkadot/util-crypto';

/**
 * Interface representing an authentication token.
 */
export interface AuthToken {
  token: string;
  expiresAt: number;
}

/**
 * SubstrateAuthenticator handles authentication via Substrate wallet signatures.
 */
export class SubstrateAuthenticator {
  /**
   * Authenticate a user by verifying that the signature was generated by the owner
   * of the provided Substrate address.
   *
   * @param address - The Substrate wallet address.
   * @param signature - The signature generated by signing the message.
   * @param message - The original message that was signed.
   * @returns A Promise that resolves to an AuthToken if authentication succeeds.
   * @throws An error if the signature is invalid.
   */
  static async authenticate(
    address: string,
    signature: string,
    message: string
  ): Promise<AuthToken> {
    // Ensure that the crypto libraries are ready.
    await cryptoWaitReady();

    // Verify the signature. The signatureVerify function returns an object with isValid.
    const { isValid } = signatureVerify(message, signature, address);

    if (!isValid) {
      throw new Error('Authentication failed: Invalid signature');
    }

    // In a production system, you might generate a JWT or similar token.
    // Here, we simply return a dummy token.
    return {
      token: `auth_${address}_${Date.now()}`,
      expiresAt: Date.now() + 3600 * 1000, // Token valid for 1 hour.
    };
  }
}
